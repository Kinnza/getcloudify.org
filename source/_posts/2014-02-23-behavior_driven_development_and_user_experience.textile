---
layout: blogpost
title: Behavior Driven Development and User Experience
image: eliran.jpg
author: Eliran Malka
tags: 
 - Programming
 - Community
 - Open Source
 - Web UI
---
<notextile>
<img src="/img/blog/BDD.jpg" alt="Behavior Driven Development">
<br/>
<br/>

<p>Behavior Driven Development (BDD) is the new "buzz word" for the programming concept of Test Driven Development (TDD).&#160; This change in terminology is the result of the realization that the features of a product are, in fact, just behaviors that the developer needs to be aware of, test, and develop.&#160; That is why the relationship between user experience and behavior driven development is tightly related.&#160; User experience is just that, where the emphasis should be on the user, and their specific needs.&#160; </p>
 
<p>We tend to regard UX as development driven, and that developers and designers inherently understand what the users need. However that's not always true.&#160; There are specific roles focused on researching these complex aspects of UX, and understanding what users want, and it is the developer's job to be aware of and understand this.&#160; We really don't always know what users want, and this should have more weight in the development process. </p>
 
<p>&#160;</p>
 
<p><strong>Development Based on the User's Needs</strong></p>
 
<p>Users often times need things we don't always supply them with, or even know about, and we should listen to our users.&#160; A typical development process consists of a Product Manager, or the UX designer requesting a certain feature, based on their communication with the end user and community.&#160; However, the developer really doesn't have any contact with the end user, and this results in a broken link in the process that needs to be fixed.&#160; The developers should be aware of users' needs.&#160; </p>

<hr>

<span class="pullquote-left">
  <font style="font-weight: bold" size="5" face="Baskerville Old Face"><em>Cloudify - automation, orchestration, with the tool chain you love.</em></font>&nbsp; <a class="btn btn-large btn-theme btn-rounded" id="downloadBtnInner" href="http://getcloudify.org/downloads/get_cloudify_3x.html" target="_blank"><i class="icon-plus"></i> Go </a></span>
  
  <hr>

<p>But how?&#160; </p>

<p><strong>Speaking a Common Language</strong></p>
 
<p>This can be accomplished if all of the stakeholders in the development process from the users, through the UX designer, the product manager, and eventually the developer speak the same language. In order to achieve this, a functional specification (spec) needs to be defined that creates a common language for everyone in the development process.&#160; This common language should be used across the board, from internal communications and communications with the end user, through testing processes.&#160; This will then propagate into the development process.&#160; Once a common language is defined and understood by all the involved parties based on this spec, we can then begin to understand and extract behaviors from that common language, and start writing tests.&#160; Why write tests first?</p>
 
<p><strong>Test Driven Development</strong></p>
 
<p>The common TDD methodology, AKA BDD, is based on the idea that any term defined in the spec is a behavior a user expects from the product.&#160; If a user has an expectation from your product, this is something that should be defined and developed. This approach has suddenly reversed the process.&#160; Users can now define features, and can be involved with defining the spec, making them an integral part of the development process.&#160; Following the spec definition we begin TDD, we write and run tests based on this spec only. The way this works, is that TDD is an iterative process, i.e. - write tests first ? see that they fail ? see that the tests pass ? write code ? see&#160; that the tests pass ?&#160; update the code ? see that the tests still pass, and so forth, and so on.&#160; So long as the test doesn't pass we don't have a working feature/update/bug fix/patch or whatever it is we're attempting to rollout.</p>
 
<p>&#160;</p>
 
<p><strong>Why Test Driven Development has Become Behavior Driven Development</strong></p>
 
<p>Once a stakeholder in the development process defines a certain behavior it can be changed. Behaviors can be dynamic. If a user decides they would like a certain behavior changed, we can always redefine the spec and decide upon different behaviors. Once the behavior is redefined, it is then updated&#160; in the spec, and becomes a new term in the common language that all of the stakeholders are familiar with, which ultimately defines the development process for this new term.&#160; </p>
 
<p>It's important to note that in addition to being iterative, the spec is also cyclic.&#160; Each stakeholder can influence the features implemented or suggested, or suggest new features, as they all extract the needs from the users.&#160; So eventually everyone is involved in the process.</p>
 
<p>&#160;</p>
 
<p><strong>Open Source Community &amp; Development</strong></p>
 
<p>Open source communities are usually very involved in a product, especially if they have specific expectations from a product.&#160; That said though, they are also very careful about being respectful of the product.&#160; Open source community members honor other people's code.&#160; For the most part the community will be comprised of developers who are also contributors, not just users.&#160; They tend to be very careful about contributing, without communication first. Communication is a core value in the open source world.</p>
 
<p>If a community contributor believes your product needs to have a certain feature, they'll usually first communicate with the developers and ask for the feature, and see how they respond, as opposed to just forking the code, writing the feature, and then pushing it back. This is why the common language is important, it makes it easier to communicate these needs.&#160; This is especially true with open source products, when often times the community supplies answers about the product that the vendor can't.&#160; Therefore involving the users, and creating a common language eventually contributes to the satisfaction of the users, and their overall user experience, in return for simplifying communication.</p>
 
<p>For us at Cloudify, this is a guiding principle in our development process, to ensure our development is always behavior driven, and puts the user at the center of the experience.</p>
</notextile>

