---
layout: blogpost
title: Moving from an interface to a base class across Java versions
image: barak.jpg
author: Barak Merimovich
tags: 
 - Cloud Driver
 - JClouds 
 - Programming 
 - Cloud Computing 
---
<notextile>

<img src="/img/blog/DukeCloudify.jpg" alt="Java 8 - Java Base Classes + Java Interfaces">
<br/>
<br/>

<p>Interfaces are one of the core design concepts of Object Oriented Design. They are used for multiple reasons, like enabling multiple implementations of specific interfaces.&#160; In this post, I'll dive into how these are used in Java 6 and 7, how they apply to Cloudify, and what's coming with Java 8.</p>

<p>So, just for those who are unfamiliar, in object design an interface is a contract that an object is required to fulfill.&#160; If an object declares that it implements an interface, then it is required to implement all of the methods defined in that interface. This essentially allows developers to separate between the definition (i.e. interface) of an object and its implementation.&#160; In layman's terms, separating the what from the how.</p>

<p>For instance with Cloudify, at the core of the product we have the <a href="http://www.cloudifysource.org/guide/2.7/clouddrivers/cloud_driver">cloud driver</a>, which defines how Cloudify allocates resources from the cloud of choice.&#160; Obviously, each cloud has its own API, so there are multiple cloud driver interface implementations.&#160; There is one based on <a target="_blank" href="http://jclouds.apache.org/">JClouds</a>, the multi-cloud library, one for <a href="https://www.windowsazure.com/en-us/">Microsoft Azure</a>, in addition to several other implementations.&#160; On top of these, users are also able to create their own cloud driver implementations, using Java or Groovy. </p>

<p>The thing with using a Java interface though, is that once you have defined it, and users have started using it, changing it is very difficult.&#160; It's difficult because if an interface is changed, all of its existing implementations must be changed as well, since this will result in them either breaking during compilation or during runtime.&#160; With Cloudify, where users can create their own cloud driver, and there are multiple versions of Cloudify currently in production, this can get very tricky.</p>

<hr>

<span class="pullquote-left">
  <h2><font style="font-weight: bold" size="5" face="Baskerville Old Face"><em>Transition your apps on the cloud from Java 7 to Java 8 seamlessly with Cloudify.</em></font>&nbsp; &nbsp; <a class="btn btn-large btn-theme btn-rounded" id="downloadBtnInner" href="http://getcloudify.org/downloads/get_cloudify.html" target="_blank"><i class="icon-plus"></i> Go </a></h2></span>
  
  <hr>



<p>Now add to this the fact that the cloud world is rapidly changing.&#160; It is a dynamic world with new features coming out all the time, from new cloud APIs, and new storage, network and compute implementations, through new features being added to existing services regularly.&#160; Being able to maintain these services and interfaces without changing them, has become a maintenance challenge in Cloudify.&#160; </p>

<p>In order to 'future-proof' the cloud driver interface, the Cloudify 2.7 team has decided to shift from using <a target="_blank" href="https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/ProvisioningDriver.java">interfaces </a>to using Java <a target="_blank" href="https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/BaseComputeDriver.java">abstract classes</a>. By using an abstract base class, Cloudify can add new method declarations into the base interface, as well as add default implementations. For instance throwing a Java standard <a target="_blank" href="http://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html">Unsupported </a>error for newly added methods. This new approach will allow us to add new methods to our &quot;cloud driver interface&quot; without breaking existing cloud drivers.&#160; </p>

<p>To ensure backwards compatibility the old cloud driver interface will still be supported, but new cloud driver functionality will not be added to it, so as a result we expect these to be phased out eventually.</p>

<p>Using a base class to define an interface is considered less friendly in Object Oriented Design, as it forces the developer to extend Cloudify's base class, rather than define their own implementation inheritance themselves.&#160; This is due to the fact that in Java, a class can implement multiple interfaces, but it can only extend one base class.&#160; Therefore, this design is considered intrusive.&#160; However, for the rapidly changing cloud landscape, we have found this to be the best option.</p>

<p>Enter Java 8. While it still has not been released, Java 8 is scheduled to include the option for adding <a target="_blank" href="http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html">'Default Methods'</a> - default method implementations for an interface.&#160; This enables you to add a method to an interface which includes a default implementation, so that implementing classes will not break if they were compiled with the previous version of the interface.</p>

<p>This basically means that users will be able to publish a cloud driver interface and add methods to it later without breaking compilation or runtime requirements for existing cloud driver implementations.&#160; This issue of interface future compatibility is the reason that Java has chosen to add this feature.</p>

<p>For now, Cloudify supports Java versions 6 &amp; 7. That said, we expect to see this new Java 8 feature of default methods become very useful for the entire Java community.</p>

</notextile>