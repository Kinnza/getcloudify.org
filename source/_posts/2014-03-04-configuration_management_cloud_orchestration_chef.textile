---
layout: blogpost
title: From Configuration Management to Cloud Orchestration How Cloudify Integrates with Chef
image: ronz.jpg
author: Ron Zavner
tags: 
 - Cloud Orchestration
 - Deployment Automation
 - Chef
 - Configuration Management
 - Chef Cloud
---
<notextile>

<h3>How Cloudify Integrates with Chef</h3>

<p>There are many common challenges today for your everyday dev and ops tasks:</p>

<ul>
  <li>
    <p>Configuration management</p>
  </li>

  <li>
    <p>Server provisioning</p>
  </li>

  <li>
    <p>Application deployment</p>
  </li>

  <li>
    <p>Monitoring of deployed tiers</p>
  </li>

  <li>
    <p>Auto-scaling</p>
  </li>
</ul>

<p>In addition to some nice to have functionality, such as multi-region resilience and multi-cloud enablement.&#160; This is where known DevOps tools come in.&#160; There are quite a few common configuration management tools to help you setup your environment.&#160; Cloudify integrates natively with the two most common CM tools - Chef and Puppet.&#160; This is a quick how-to guide for how to use Chef with Cloudify.</p>

<hr>

<span class="pullquote-left">
  <font style="font-weight: bold" size="5" face="Baskerville Old Face"><em>Cloudify natively integrates with Chef. Try it out.</em></font>&nbsp; <a class="btn btn-large btn-theme btn-rounded" id="downloadBtnInner" href="http://getcloudify.org/downloads/get_cloudify_3x.html" target="_blank"><i class="icon-plus"></i> Go </a></span>
  
  <hr>

<h3>Chef For Noobs</h3>

<p>For those unfamiliar with <a target="_blank" href="http://www.getchef.com/">Chef</a>, it is an open-source configuration management tool, essentially an automation platform built to address the most difficult infrastructure challenges. It provides rapid provisioning and deployment of servers for automated delivery of applications and services, at scale, as well. The user writes &quot;recipes&quot; that describe how a Chef manages server applications (such as Apache, MySQL, or Hadoop) and how they are to be configured. These recipes describe a series of resources that should be in a particular state - packages that should be installed, services that should be running, or files that should be written. Chef makes sure each resource is properly configured, and automatically discovers data points of the system. Chef takes care of the configuration management challenge quite well.</p>

<h3>Cloudify + Chef</h3>

<p>While Chef is a great configuration management tool that can save a lot of time and prevent many mistakes in application deployment, most dev and ops folks face more than just these challenges.&#160; Some of these include: VMs provisioning in the pre-deployment phase, and monitoring and scaling in the post deployment phase. This is where Cloudify integrates with Chef to manage the entire application lifecycle.</p>

<p>Partnered with Chef, Cloudify allows your application to concentrate on doing what it does best, by ensuring that the resources it needs are available regardless of the cloud and stack used. Cloudify provides the <a href="http://www.cloudifysource.org/guide/2.7/overview/cloudify_intro">cloud orchestration</a> that takes care of provisioning VMs, networks, block storage, and such, that you need in the cloud. Using Chef, the lifecycle of services can be simplified as Chef takes care of keeping service configurations up-to-date with current specifications as defined by roles and cookbooks. In order to use Chef cookbooks for service installation, Cloudify provides a configurable base Chef recipe that does most of the Chef bootstrapping work. Typically you will only need to extend this recipe and take care of the pre and post deployment phases that Chef doesn't handle.</p>

<h3>The Basic Flow</h3>

<p>Server provisioning<img src="https://lh4.googleusercontent.com/g35ejqcUSWbmIkhSurEerJZZMC2Oqfe9hkCLaLJ3RXANgr-xbYehhxMZevOhRbH5ytSnLtAfCFjCGbh6rLVHHs_-NRgFhMi1YEz9CEpZkDQbiOqFRtoIg4bxdA" width="560" height="341" /></p>

<h3>Application deployment</h3>

<img src="https://lh3.googleusercontent.com/uteBoplUpt9R5txapfgf9aljnFnZ39QUmMba84UU4A2eJFgpAPCzk68kTujxcDmiJNSLB6pnakxAb3WTwTsaxOtnPDAitbImOWW47oQbZQgAq9BmyqhRi1iFiw" width="570" height="347" />

<h3>Monitoring of deployed tiers and auto scaling</h3>
<img src="https://lh6.googleusercontent.com/BAIg0IIrYRtBo-tO7aqiykDiYJBxaczfohaaT3Jtvlev3a0iheJ0Y6EsWSx_ZS7iQVdRiZ50DqjDPGLIHUd4BENP6EhY8tfC6COuqaiz5Ci748-nXD8SHZ_ioQ" width="624" height="343" />

<p><img src="https://lh4.googleusercontent.com/OSNVfpguUq5LKAQhq_aXEfyqwKiQdk8vMMQInsqFnG2xZ-O7Rav_uFk9mQprXbUJuMT17BmiyqdzM8TIJDl5JD0F0UPWkz39NtmVPy5Q8sTxJjstegDHLwkW9A" width="624" height="322" /></p>

<h3>Use Case - How to Achieve Continuous Delivery with Chef and Cloudify</h3>

<p>A typical deployment is usually comprised of a number of artifacts that include configuration management, monitoring configuration, custom scripts to deal with availability, SLAs, and integration with third-party components.&#160; This leads to a high degree of complexity, especially in a continuously changing environment such as a fast-paced continuous delivery model - with this type of delivery model, such a modus operandi is just not sustainable.</p>

<p>What needs to be done in order to enable continuous delivery is to consolidate all of the different artifacts into a single blueprint, which then becomes the "single-source of truth" for the entire stack.&#160; This coupled with a<a href="http://www.cloudifysource.org/guide/2.7/overview/cloudify_intro"> cloud orchestration</a> engine, in this case Cloudify, that can parse that blueprint and execute the definitions defined therein through a single command to create a fully consistent environment - for example between staging and production.&#160; This includes the configuration, application binaries and all its dependencies, as well as post-deployment SLAs. This provides a single-source for updating changes to the application blueprints ands SLAs themselves, such as updating monitoring and management metrics, high availability policies, failure detection policies and configuration changes. With this the technology is then selected from predefined menus that are defined by architecture and are delivered by platform, where the configuration is fully automated with the use of Chef as the configuration management tool.&#160; </p>

<p>The build process can then be consolidated into a single build pipeline that is agnostic of the technology stack and language runtime, through Cloudify's<a href="http://www.cloudifysource.org/guide/2.7/developing/custom_commands"> custom commands</a>.&#160; These custom commands enable continuous interaction with a live system, in the post-deployment phase, for upgrades and shipping of new code to production.</p>

<p>The full how-to guide on the<a href="http://www.cloudifysource.org/guide/2.7/integrations/chef_documentation"> Chef integration</a> with Cloudify can be found in our wiki.</p>


</notextile>
