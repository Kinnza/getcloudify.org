---
layout: blogpost
title: Deployment Automation, Cloud Management & Monitoring with Puppet & Cloudify
image: ronz.jpg
author: Ron Zavner
tags: 
 - Cloud Orchestration
 - Cloud Management
 - Configuration Management
 - Deployment Automation
 - Puppet
 - DevOps
---
<notextile>
<p>Ok, so our new configuration is great, but now it's time to think about taking our <a href="http://www.cloudifysource.org/2014/01/23/intro_to_puppet_installing_your_first_mysql_service_in_5_minutes.html">cloud automation</a> (see previous post) to the next level. While Puppet takes care of our deployment phase, we are still stuck with manual provisioning of the machine and manual management of the post-deployment phase, such as self-healing, automatic scaling and more. But not to worry too much - Puppet partnered with&#160; Cloudify helps simplify this significantly.</p>

<p>Cloudify automates the provisioning of the machines for us, really for virtually any cloud (AWS, Rackspace, OpenStack, Cloudstack, vCloud, {insert preferred cloud here}), even if you work in a private data center with physical machines.</p>

<p>Once Cloudify instructs the cloud to provision the virtual machines, it can then install a Puppet Agent for us, after which the Puppet Agent will continue the installation step.</p>

<p>Cloudify works with application orchestration plans called recipes. However, there are a few differences - since Cloudify takes care of pre and post-deployment, the recipe can also include the service dependencies, type of machine for each service, as well as, monitoring and scaling configuration. It is also possible to extend another recipe by overriding specific parts of the lifecycle, and changing pre-defined properties, and connecting to other remote services and third-party apps such as monitoring apps (Zabbix, Nagios, Logstash, Zenoss etc.). </p>

<p>Now we can try and take it to the next level ... let's see what that looks like:</p>

<p><b>The Flow</b></p>

<p>1. Cloudify provisions a new machine.</p>

<p>2. It then installs a Puppet Agent (via the Cloudify Agents).</p>

<p>3. The Puppet Agent then connects to Puppet Master.</p>

<p>4. The Puppet Master will provide the required module.</p>

<p>The recipes are pretty simple, all they require is for you to define:</p>

<ul>
  <li>The service name (so it can be translated by the Puppet Master to the right manifest) </li>

  <li>The specifications of the app lifecycle, such as <a href="http://www.cloudifysource.org/guide/plugins_and_probes/probes">start and stop detection</a> to know when the service is up and running </li>

  <li>Finally the <a href="http://www.cloudifysource.org/guide/developing/scaling_rules">scaling rules</a> and any other actions in the post-deployment phase </li>
</ul>
<br/>
<img src="/images/PuppetCloudify.png" />

<p>&#160;</p>

<p>Please note, that the Puppet Master can be deployed automatically (via Cloudify) or manually (and then you need to provide the Puppet Master IP). You'll likely already have a Puppet Master deployed (and have some modules and manifests installed), so in that case, you can use those.</p>

<p><b>Challenges - Classifier and Signing to the Puppet Master</b></p>

<p>The main question is how does the Puppet Master know which module to provide? Since we are working in a cloud environment, the host name of the new machine is meaningless. We need another way to let the master know that we need a specific service, say MySQL, for example. This is done using the Cloudify/Puppet integration which leverages the Puppet <a href="http://puppetlabs.com/facter">facter</a>. Cloudify can use the facter to send facts to the classifier, a classifier which presents the required module instead of relying on the node name. We add another section to the site.pp code that will analyze the Cloudify classifier variable, and based on the value received, will determine which modules we want to include and install.</p>

<p>If you take a closer look at the integration, you will find under the Puppet recipe directory, PuppetBootstrap.groovy, which is invoked as part of the lifecycle managed by puppet-service.groovy. In the first file, you can find methods that are responsible for the bootstrap process as the name indicates, among them the creation of puppet.conf file using groovy templates. This file is also responsible for the interaction with the Puppet Master server in case an external classifier plugin is used.</p>

<p>Another issue you need to bear in mind - the interaction between the agent and the master requires signing. The agent signs to the Puppet Master and then the Puppet Master admin needs to approve this request to issue a certificate to the agent. This, of course, can't work in our environment either, so the way to do this is to approve all requests by auto-signing and relying on firewalls and security groups to make sure that each agent is really allowed to access that Puppet Master.</p>

<p><b>Advantages of this Method</b></p>

<ol>
  <li>Automating Puppet deployment - agent installation </li>

  <li>Automating the mapping of Puppet modules to the machines using the classifier </li>

  <li>Dependency management (for example Tomcat depends on MySQL) </li>

  <li>Overall monitoring - deployment process and post deployment state </li>

  <li>Multi-Cloud - abstraction layer from the cloud allows us to use the same process on different clouds, also on BYON (<a href="http://www.cloudifysource.org/guide/bootstrapping/bootstrapping_byon">bare-metal cloud</a>) and on our <a href="http://www.cloudifysource.org/guide/bootstrapping/bootstrapping_localcloud">local cloud</a>. </li>
</ol>

<p><b>Step by Step</b></p>

<p>Assuming we are working on our MySQL module, the MySQL recipe would look as follows:</p>

<p>1. We don't need to replace or delete existing parts of the site.pp file, just to add something as the following:</p>

<script src="https://gist.github.com/tamirko/8953230.js"></script>

<p>&#160;</p>

<p>2. In the Puppet Master add auto sign in for all agents - create the file under puppet/autosign.conf. - Add only * in autosign.conf.</p>

<p>&#160;</p>

<p>3. One file would be the service properties file which should contain the Puppet Master server IP:</p>

<p>puppetMasterIp=&quot;ip-10-4-30-136.ec2.internal&quot;</p>

<p>Make sure that you provide this value to the puppet agent properties file.</p>

<p>&#160;</p>

<p>4. The groovy recipe would look as follows (extending Puppet Agent):</p>

<script src="https://gist.github.com/tamirko/8953302.js"></script>
<p>&#160;</p>

<p>So, whether installing your first MySQL with Puppet in just a couple of minutes, or taking it to the next level of <a href="http://www.cloudifysource.org/2014/01/23/intro_to_puppet_installing_your_first_mysql_service_in_5_minutes.html">cloud automation</a>, as demonstrated in the previous post - Cloudify and Puppet integrate seamlessly through all the phases of application deployment to the cloud. Learn more about other <a href="http://www.cloudifysource.org/guide/2.7/integrations/chef_documentation">configuration management</a> integrations, and <a href="http://www.cloudifysource.org/guide/2.7/overview/cloudify_intro">cloud orchestration</a> tweaks.</p>

</notextile>
