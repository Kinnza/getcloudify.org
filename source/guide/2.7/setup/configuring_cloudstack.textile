---
layout: bt_wiki
title: Configuring CloudStack Cloud
category: Installation & Setup
publish: true
abstract: Explains how to configure CloudStack Cloud for Cloudify
pageord: 900
--- 

This topic provides instructions for configuring CloudStack Cloud for Cloudify.

h2. Prerequisites

* A "(newwindow)CloudStack Cloud":http://www.citrix.com/products/cloudplatform/overview.html account
* Cloudify shell (for information about installing the Cloudify shell, see "Installing the Cloudify Shell":../setup/installing_the_cloudify_client.html)

h2. Configuring a CloudStack Cloud

This section provides step-by-step instructions for the following configuration tasks:

* "Obtain the API Key and Secret Key":#key
* "Obtain SSH Credentials":#ssh
* "Obtain Image, Location and Hardware IDs from Your CloudStack Environment":#get_ids
* "Configure a Security Group":#sec
* "Configure the Cloudify Cloud Driver Configuration Files":#driver
* "Optional: Configure NAT for Non Flat IP Network Architecture":#nat
* "Bootsrapping a Cloudify Manager on CloudStack":#bootstrap
* "Tearing Down the Cloudify Environment":#tear


h3(#key). Obtain the API Key and Secret Key

# Login as administrator
# Go to Accounts
# Select the account which user belongs
# Click on View Users
# Select the user
# Click on generate keys icon and you'll be able to see them in the detail View
!/guide/images/cloudstack/create_api_key_and_secret_key.png!

h4(info). The API keys will be used later with your driver configuration to communicate with the CloudStack environment.

h3(#ssh). Obtain SSH Credentials 

If you're using simple username/password SSH authentication, these are simply the root / sudo user credentials to the created VM (you should know them in advance and they're usually specific for each image). If you're using SSH keypair authentication, you can generate the keypair from using the CloudStack API. Please refer to the "relevant section in the CloudStack documentation":http://cloudstack.apache.org/docs/en-US/Apache_CloudStack/4.0.2/html/Installation_Guide/using-sshkeys.html for directions on how to create a keypair. 

After you've generated the keypair file, you should place it in the @upload@ directory in your CloudStack cloud driver folder, e.g. @<cloudify root>/clouds/cloudstack-3.x/upload@. 

h3(#get_ids). Obtain Compute Offering, Zone and Template IDs from Your CloudStack Environment

Compute Offering, Zone and Template IDs determine the hardware profile and operating system image of the VMs Cloudify will create on CloudStack. Note that in the Cloudify/JClouds lingo, Compute offering IDs correspond to hardware IDs, template IDs correspond to image IDs, and zone IDs corresspond to location IDs. In this cotext we'll use the CloudStack. You can use the "JClouds CLI":https://github.com/jclouds/jclouds-cli to retreive them. To get the list of compute offering, template and zone IDs using this tool, follow the below steps: 

* Download the "JClouds CLI":http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.jclouds.cli%22%20AND%20a%3A%22jclouds-cli%22 (choose the tarball for *nix systems and zip for windowns based system) and extract it any where om your disk
* In the extracted directory, navigate to the @/bin@ directory and run the @jcloud-cli@ command.
* Install the @cloudstack@ feature: @features:install jclouds-api-cloudstack@
* Type the following command to get the template IDs list: @jclouds:image-list --api cloudstack --credential <secretKey> --identity <apiKey> endpoint http://<server address>/client/api@
* Type the following command to get the zone IDs list: @jclouds:location-list --api cloudstack --credential <secretKey> --identity <apiKey> endpoint http://<server address>/client/api@
* Type the following command to get the compute offering IDs list: @jclouds:hardware-list --api cloudstack --credential <secretKey> --identity <apiKey> endpoint http://<server address>/client/api@
The output should look like this:

Templates list: 

<pre class='prettyprint'>
[id]                                 [location]                           [os family] [os version] [status]
e72f32dd-b9bb-44c0-aba9-546592a3e09a d0d5f14f-0564-45e4-86d9-bbcb3c2bfa3f windows     7            AVAILABLE
8dacbe2d-c4e9-4a6c-82bc-f4bd3540d84e d0d5f14f-0564-45e4-86d9-bbcb3c2bfa3f centos      5.6          AVAILABLE
a2aa03dc-a294-4188-8062-be24e21ebe6e d0d5f14f-0564-45e4-86d9-bbcb3c2bfa3f centos      6.0          AVAILABLE
</pre>

Zones List (note that you should use a location with scope ZONE): 
<pre class='prettyprint'>
id]                                 [scope]  [description]                      [parent]
cloudstack                           PROVIDER http://iaas.cpgdemo.net/client/api
d0d5f14f-0564-45e4-86d9-bbcb3c2bfa3f ZONE     CPGDemo                            cloudstack
</pre>

Compute offerings list:

<pre class='prettyprint'>
[id]                                 [ram]  [cpu] [cores]
9baa1a86-d9ab-4e58-ae67-269efa459a79  2048 2000.0     2.0
60bdc030-338c-446d-a316-adc30fdaced7  1024 1000.0     1.0
ebc56d93-2732-4265-9734-e0fdd52851b5   512  500.0     1.0
0ef1c905-2daa-4da8-b444-04ed7fd6fda6   256 1000.0     1.0
</pre>

h3(#sec). Configure a Security Group 

Next, you should configure a security group with the following rules: 
To enable Cloudify to properly start and configure VMs for you, you will need to define the following rules in a security group (you can do this in more than group, as long as the )
* Management VM: ingress, TCP port 22 and 8100 for the CLI machine and any client that you want to use to access the started VMs via SSH or the Cloudify CLI. You can simply open it for all sources (CIDR 0.0.0.0/0)
* Management VM: ingress for 8099 for any machine that should have access to the Web UI and REST API. You can also open it for all sources (CIDR 0.0.0.0/0). 
* Every VM started by Cloudify: egress for 80 and 443 to all targets (CIDR 0.0.0.0/0) to enable downloading binaries from the internet.
* Every VM started by Cloudify: egress and ingress for TCP ports 0-32000 for communication between the manager and the agents. 
* Application VMs, as needed: Any application specific ports that you would like to expose to the outside world (e.g. 80 and 443 for out-facing web servers). 

h3(#driver). Configure the Cloudify Cloud Driver Configuration File

First, download the "Cloudify CloudStack driver files":https://github.com/CloudifySource/cloudify-cloud-drivers/tree/master/cloudstack and place them in @<cloudifyRoot>/clouds/cloudstack-3.x/@
Edit the CloudStack cloud driver configuration file (@cloudstack-cloud.properties@) and modify the following attributes:

<pre class='prettyprint'>
//CloudStack API Key
apiKey="API_KEY"

//CloudStack Secret Key
secretKey="SECRET_KEY"

persistencePath="/var/cloudifyManagerState"

//The CloudStack API Endpoint URL
cloudStackAPIEndpoint="CLOUDSTACK_API_ENDPOINT_URL"
	
//The name of the security group you want your VMs created with. 
//If you create more compute templates in the cloudstack-cloud.groovy files, this can be changed 
//on a per template basis
securityGroupId="SECURITY_GROUP_ID"

//The CloudStack compute offiering ID you would like to use. This can be changed for each cloud driver template as well 
computeOfferingId="COMPUTE_OFFERING_ID"

//The SSH username for Cloudify to use when installing and configuring created VMs
sshUsername="SSH_USERNAME"

//The SSH password for Cloudify to use when installing and configuring created VMs. Use it only if you're 
//using simple SSH authentication without a keypair. Also make sure to uncomment the password properties 
//in the cloudstack-cloud.groovy file, comment out the keyFile and keyPair properties in that file. 
sshPassword="SSH_PASSWORD"

//The SSH keypair name and file name for Cloudify to use when installing and configuring created VMs. 
//The keypair file should be placed under the upload directory of the cloud driver configuration. 
//If you use that make sure to uncomment the keyFile and keyPair properties in the cloustack-cloud.groovy 
//file, and comment out the username and password properties. 
sshKeypairName="KEYPAIR_NAME"
sshKeypairFile="KEYPAIR_FILE"

remoteUploadDirectory="/opt/cloudify"
localUploadDirectory="upload"

//The CloudStack zone ID of the compute template you're going to use
zoneId="ZONE_ID"

//The cloudstack compute template ID for created VMs. This too can be overridden on a per compute template basis
templateId="TEMPLATE_ID"

//When using non flat network, this specifies the network ID you want your VMs to attach to. Can be changed 
//on a per template basis
networkId="NETWORK_ID"

//When using non flat network, this specifies the public and private network IDs you want your VMs to attach to. Can be changed 
//on a per template basis
publicNetworkId="PUBLIC_NETWORK_ID"
privateNetworkId="PRIVATE_NETWORK_ID"
</pre>

h3(#nat). Configuring NAT for Non-Flat IP Network Architecture

If you're using a non-flat network setup, and want to enable access to the VMs from outside the private network you've installed your application on, you will need to follow the following steps for each VM you want to enable. At the minimum, you should enable access to the cloudify management VM and the main application entry point VM (e.g. the one that hosts your application's web server or load balancer): 

* Login to the ClousStack dashboard as Administrator
* Go to the Network section 
* Select a network name
* Go to the Egress rules tab
* set cidr 0.0.0.0/0 to "All" and add it
!/guide/images/cloudstack/configure_network_egress.png!
* Go to details tab and select "View IP Addresses"
* Click "Aquire New IP" for your virtual machine
!/guide/images/cloudstack/aquire_new_ip.png!
* Click the IP you created and configure firewall and port forwarding
!/guide/images/cloudstack/configure_firewall_and_port_forwarding.png!
** Configure the firewall port and CIDR of your VM
!/guide/images/cloudstack/configure_firewall.png!
** Configure port forwarding
!/guide/images/cloudstack/configure_port_forwarding.png!

h4(warn). Repeat steps 6-8 for each vm would you like to access it from the internet.

e.g. workstation to install cloudify agent should be opened SSH port and cloudify agent vm should be opened port 8099-8100 to access Rest API and web ui

h3(#bootstrap). Bootstrapping

You're ready to bootstrap Cloudify on your CloudStack environment. Follow the "bootstrapping":../bootstrapping/bootstrapping_process.html#boot procedure, typing the following command in step 2: *@bootstrap-cloud@* @cloudstack@

h3(#tear). Teardown

To shut down a CloudStack Cloud environment, at the Cloudify shell prompt, type: *@teardown-cloud@* @cloudstack@

h4(info). This uninstalls applications and shuts down all the management and service instance machines.


