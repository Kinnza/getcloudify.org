---
layout: bt_wiki
title: Developing Custom Cloud Drivers
category: Developing Cloud Drivers
publish: true
abstract: An overview of how to develop custom cloud drivers
pageord: 200
---

This topic explains how to develop custom cloud drivers. 

h2. Introduction

The cloud driver is a pluggable component that allows extending Cloudify to support new cloud environments, or to tweak existing cloud drivers.
There are three cloud driver base classes:

* "BaseProvisioningDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/BaseProvisioningDriver.java - new virtual machine instances (compute).
* "BaseNetworkDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/network/BaseNetworkDriver.java - Allocate floating IP addresses (network)
* "BaseStorageDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/storage/BaseStorageDriver.java - Create and attach Block Storage (storage)

h2. Before You Start

Before you start developing you cloud driver, make sure you have the following:
* "Apache Maven":http://maven.apache.org/
* "Cloudify":../setup/installing_the_cloudify_client.html
* The security credentials for your cloud's API calls, for accessing your machines using SSH, and if required for accessing your cloud's storage.
<h4 class="info">For example, to obtain security credentials for Openstack, perform the following steps:
<ol><li>Request a login, and its corresponding access key and secret key, from your Openstack administrator. In the @user@ section of the cloud driver configuration file, the access key and secret key correspond to the @user@ and the @apiKey@ attributes respectively.</li>
<li>Generate a SSL key pair file (required for bootstrapping machines) using "HybridFox":http://code.google.com/p/hybridfox/, and save it in the cloud driver's @upload@ folder. In the @user@ section of the cloud driver configuration file, the @keyFile@ attribute is set to the path of the SSL key pair file.
<img src="../../images/clouddrivers/cloud_driver_plugin.png"/></li></ol></h4>
* "Create cloud images":../setup/post_installation_configuration.html#images.

h2. Developing a new Compute Cloud Driver 

Developing a new compute cloud driver is required when a new cloud is neither supported by Cloudify, nor supported by JClouds (which powers the default Cloudify cloud driver).

* Create a new Java class that extends "BaseProvisioningDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/BaseProvisioningDriver.java
* maven dependency:
<script src="https://gist.github.com/noakup/8039851.js"></script>
* maven repository:
<script src="https://gist.github.com/2070752.js?file=repo.xml"></script>

* Implement initDeployer() with initialization code.
** Remember that the class is instantiated once for each installed service. So this method is called once per service, but not once globally.
** If the method throws an exception the webui will issue an alert and the service would have to be uninstalled for the alert to be resolved. 
** Create singleton objects (shared between all instances) using super.provisioningContext (see "ByonProvisioningDriver#initDeployed()":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/byon/ByonProvisioningDriver.java#L90)
** The Cloudify Orchestrator process which hosts the cloud driver, can be restarted without notice. Store operational metadata using the cloud service.
** The cloud groovy file (such as <cloudifyHome>/clouds/myCloud/myCloud-service.groovy) is available as the "Cloud POJO":https://github.com/CloudifySource/cloudify/blob/master/domain/src/main/java/org/cloudifysource/domain/cloud/Cloud.java.
   Access the cloud instance with @super.cloud@

* Implement onServiceUninstalled() with cleanup operations.
** This method is called only once.
** If the method throws an exception the webui will issue an alert which will automatically resolve once the uninstallation process is complete.
  
* Implement the code that starts a new machine in the startMachine method.
** Respect the timeout parameter, by limiting blocking operations. If the timeout expired throw TimeoutException.
** Wrap any Exception with CloudProvisioningException before throwing.
** Any thrown (fatal) Error is unexpected and is logged with a SEVERE log entry in the esm*.log file.
** The return value is a MachineDetails object which serves a few purposes:
*** Allow the caller to SSH into the machine after it started (see "EMPCA#installAndStartAgent":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/ElasticMachineProvisioningCloudifyAdapter.java#L702)
*** Allow the cloud driver to inject environment variables to the "bootstrap script":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/resources/general/bootstrap-management.sh
*** Allow the cloud driver to control the open files limit on the linux machine (converted to a @ulimit -HSn $CLOUDIFY_OPEN_FILES_LIMIT@ command in the "bootstrap script":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/resources/general/bootstrap-management.sh)
*** If startMachine is called as a response to a machine failure (and not as a response to scale out request), it can use context.getPreviousMachineDetails() to retrieve the MachineDetails of the recently failed machine.
    The MachineDetails returned by this method is passed to the next startMachine call in case it fails.
    The MachineDetails survives process restarts since it is backed up in the cloudifyManagementSpace.

* Implement the code that stops an existing machine in the stopMachine method.
** Respect the timeout parameter, by limiting blocking operations. If the timeout expired throw TimeoutException.
** Stop machine can be called in response to uninstall-service or in a scale-in use case, or to validate a machine is terminated as a response to an exception from startMachine.
** If the machine was already terminated when the stopMachine method was called - return false. 
** If the machine was not already terminated, and stopMachine took an action to terminate the machine - return true
** Wrap any Exception with CloudProvisioningException before throwing. The method would promptly called again for another retry.
** Any thrown (fatal) Error is unexpected and is logged with a SEVERE log entry in the esm*.log file.

* Implement the code that starts the management machines in the startManagementMachines method.
** Respect the timeout parameter, by limiting blocking operations. If the timeout expired throw TimeoutException.
** Read the configuration (such as number of management machines) from super.cloud.getConfiguration().getManagementMachineTemplate()
** Wrap any Exception with CloudProvisioningException before throwing.
** Any throwable aborts the bootstrap-management CLI command and the error is printed on screen.
** Make sure to tag these machines since the list of the management machines would not be available when stopManagementMachines is called.
  
* Implement the code that stops all management machines in the stopManagementMachines method.
** Respect the timeout parameter, by limiting blocking operations. If the timeout expired throw TimeoutException.
** Read the configuration (such as number of management machines) from super.cloud.getConfiguration().getManagementMachineTemplate()
** Wrap any Exception with CloudProvisioningException before throwing.
** Any throwable aborts the teardown-management CLI command and the error is printed on screen.
** Implement machine tags to identify the management machines before stopping them.

* Package the class in a jar file and place the it in the @<cloudifyRoot>/clouds/cloudProviderName/lib/@ folder.

h2. Tweaking an existing cloud driver 

Sometimes, all we need is to extend an existing cloud driver. The quickest way is to place the new cloud driver class in a groovy file in the @<cloudifyRoot>/clouds/cloudProviderName/lib/@ folder.
For example, this "test compute driver":https://github.com/CloudifySource/Cloudify-iTests/blob/master/src/main/resources/custom-cloud-drivers/CustomEc2NetworkSupportTest/ProvisioningDriverClass.groovy injects a new environment variable to the bootstrap script.
It extends the default driver (based on JClouds) and most of the methods remain untouched.

h2. Changing the startup script 

Once a new machine is available, a startup script is executed on the remote machine over SSH. The script is responsible for downloading and installing Cloudify, and then starting the Cloudify agent. In some implementations, you may need to tweak this process to fit the requirements of specific environments (e.g., system proxies, mount points, and paths). You can use the default startup script (@<cloudifyRoot>/clouds/ec2/upload/bootstrap-management.sh@), which works with the built-in cloud driver as a reference. Simply place the modified script in the @<cloudifyRoot>/clouds/cloudProviderName/upload@ folder.


h2. Developing a new Network Cloud Driver 

Developing a new network cloud driver is required when the recipe allocates floating IPs (elastic IPs), but the existing cloud driver is missing network support for that cloud.
* Create a new Java class that extends "BaseNetworkDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/network/BaseNetworkDriver.java
* maven dependency:
<script src="https://gist.github.com/noakup/8039851.js"></script>
* maven repository:
<script src="https://gist.github.com/2070752.js?file=repo.xml"></script>

* Implement setConfig() with initialization code.
** Remember that the class is instantiated once for each installed service. So this method is called once per service, but not once globally.
** If the method throws an exception the webui will issue an alert and the service would have to be uninstalled for the alert to be resolved. 
** The cloud groovy file (such as <cloudifyHome>/clouds/myCloud/myCloud-service.groovy) is available as the "Cloud POJO":https://github.com/CloudifySource/cloudify/blob/master/domain/src/main/java/org/cloudifysource/domain/cloud/Cloud.java.
   Access the network configuration within the cloud POJO with @config.getCloud().getCloudNetwork()@

* Implement allocateFloatingIp(),releaseFloatingIp() to reserve/release floating ips from the specified IP pool.
** Respect the timeout parameter, by limiting blocking operations. If the timeout expired throw TimeoutException.
** allocateFloatingIp returns the IP address provided by the cloud given the specified IP pool name.
** releaseFloatingIp is idempotent (silently ignore if floating IP already release back to pool)
   
* Implement assignFloatingIp(),unassignFloatingIp()  to assign/unassign an allocated floating IP to the specified machine instance
** Respect the timeout parameter, by limiting blocking operations. If the timeout expired throw TimeoutException.
** Both the instance and the floating IP parameters are IP-Addresses. Ussually the instance IP needs to be translated to the cloud instance-id, and the floating  to its respective identifier (via a Cloud API call).

* Package the class in a jar file and place the it in the @<cloudifyRoot>/clouds/cloudProviderName/lib/@ folder.


h2. Developing a new Storage Cloud Driver 

The storage driver functionality is used to allow Cloudify to provide the following storage related workflows:

h3. Creating a Volume

!../../images/developing/sd1.jpg!

In this scenario, the service recipe (which resides on the agent machine) invokes a request to create a new volume. This request is handled by the ServiceContext and is delegated all the way to the Storage Driver, which resides on the management machine. The storage driver in turn executes an API call to the specific IaaS provider to create the new volume.
The id of the newly created volume propagates from the IaaS to the service recipe, and as mentioned above, this id serves Cloudify in a subsequent call to the attachVolume method.

h3. Attaching a Volume

!../../images/developing/sd2.jpg!

The same delegation pattern is used for the attachVolume call, but in this case there is no return value. When this call returns, the machine recognizes it has a new device attached to it and can format it and mount it to the file system.
All operations from this point are command lines that are executed directly on the local host.

h3. Mounting a Volume

!../../images/developing/sd3.jpg!

The first step is to format the newly created volume, and then mount it to a local mounting point. When this is done, users can use the mount point as if it was local storage.

h4(impt). Some operations may take time to finish. For example, formatting a 500GB disk may take a while. All the API calls are overloaded with a version that accepts a timeout, so you will not find yourself in constant timeout issues. The "StorageFacade":https://github.com/CloudifySource/cloudify/blob/master/dsl/src/main/java/org/cloudifysource/dsl/context/blockstorage/StorageFacade.java interface describes the default timeouts for each operation.

h3. Releasing and Deleting Volumes

Basically it is very similar to the above; You just need to reverse the API calls order. 


h3. Things to remember:

# A volume cannot be deleted if it is still attached to a machine.
# Detaching a volume without first un-mounting it is a bad idea. It can cause data loss and jam the operating system when trying to terminate the instance.

So the usual and recommended flow for deleting a volume is:

!../../images/developing/sd4.jpg!

Developing a new storage cloud driver is required when the recipe creates and attaches storage devices (EBS), but the existing cloud driver is missing storage support for that cloud.
* Create a new Java class that extends "BaseStorageDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/storage/BaseStorageDriver.java.
  The base class implements "StorageProvisioningDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/storage/StorageProvisioningDriver.java (which is deprecated in favor of the base class).
* maven dependency:
<script src="https://gist.github.com/noakup/8039851.js"></script>
* maven repository:
<script src="https://gist.github.com/2070752.js?file=repo.xml"></script>
* If the compute driver exposes its internal object with BaseComputeDriver#getComputeContext(), it is injected to BaseStorageDriver#setComputeContext().
  setComputeContext() is called before setConfig() is called.
* Implement setConfig() with initialization code.
** Store the cloud reference in a member field (used by the other methods)
** Access the cloud credentials with @cloud.getUser()@
** Details about the destination machine that might be relevant to the storage provisioning such as location
   will be provided by the compute template. The template is accessible using @cloud.getCloudCompute().getTemplates().get(computeTemplateName)@
* Implement createVolume(),deleteVolume() to create/delete drives.
** When creating a new volume access the volume configuration with @cloud.getCloudStorage().getTemplates().get(templateName)@
** When creating a new volume pay attention to the location parameter - in most clouds, block storage devices must be co-located with the machine instances.
** When deleting an existing volume use the location and volumeId parameter to find the relevant volume.
* Implement listAllVolumes() with code that describes all volumes
* Implement listVolumes(machineIp) with code that describes volumes attached to the specified machine
* Implement the abstract getMachineVolumeIds() to retrieve all storage volumes related to the specific machine.
  The non-persistent storage volumes may also be included in the returned list.
* Package the class in a jar file and place it in the @<cloudifyRoot>/clouds/cloudProviderName/lib/@ folder.
